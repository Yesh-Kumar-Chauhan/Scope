import { z } from 'zod';

export const personnelFormSchema = z.object({
  // PersonalID: z.number().optional(),
  firstname: z.string({
    required_error: "First Name is required",
  }).min(1, "First Name is required"),
  lastname: z.string({
    required_error: "Last Name is required",
  }).min(1, "Last Name is required"),
  street: z.string().nullable().optional(),
  city: z.string().nullable().optional(),
  state: z.string().nullable().optional(),
  zipcode: z.string().nullable().optional(),
  email: z.string({
    required_error: "Email is required",
  }).min(1, "Email is required").refine((value) => !value || z.string().email().safeParse(value).success, {
        message: "Invalid email address",
      }),
  doemp: z.string().nullable().optional(),
  cbc: z.string().nullable().optional(),
  rehired: z.string().nullable().optional(),
  homephone: z.string().nullable().optional(),
  workphone: z.string().nullable().optional(),
  otherphone: z.string().nullable().optional(),
  dob: z.string().nullable().optional(),
  stafF_ID: z.number().nullable().optional(),
  fingerprintDate: z.string().nullable().optional(),
  doterm: z.string().nullable().optional(),
  expungeDate: z.string().nullable().optional(),
  leaves: z.boolean().nullable().optional(),
  leaveStartDate: z.string().nullable().optional(),
  leaveEndDate: z.string().nullable().optional(),
  suspension: z.boolean().nullable().optional(),
  suspensionStartDate: z.string().nullable().optional(),
  suspensionEndDate: z.string().nullable().optional(),
  personalFieldSupervisor: z.string().nullable().optional(),
  personalFieldTrainer: z.string().nullable().optional(),
  personalHHC: z.string().nullable().optional(),
  comment: z.string().nullable().optional(),
  rehireable: z.boolean().nullable().optional(),
  Hidden: z.boolean().nullable().optional(),

  // Experience
  sitE_NAM_B: z.string().nullable().optional(),
  sitE_POS_B: z.string().nullable().optional(),
  moN_1_B: z.string().nullable().optional(),
  moN_1_E: z.string().nullable().optional(),
  jaN_PAY_RATE_B: z.number().nullable().optional(),
  tuE_1_B: z.string().nullable().optional(),
  tuE_1_E: z.string().nullable().optional(),
  paY_RATE_B: z.number().nullable().optional(),
  weD_1_B: z.string().nullable().optional(),
  weD_1_E: z.string().nullable().optional(),
  seP_PAY_RATE_B: z.number().nullable().optional(),
  thU_1_B: z.string().nullable().optional(),
  thU_1_E: z.string().nullable().optional(),
  maX_HRS_B: z.number().nullable().optional(),
  frI_1_B: z.string().nullable().optional(),
  frI_1_E: z.string().nullable().optional(),
  salarY_B: z.number().nullable().optional(),
  effectiveDateBefore: z.string().nullable().optional(),
  allottedb: z.number().nullable().optional(),
  aloneWithChildren: z.boolean().nullable().optional(),

  sitE_NAM_D: z.string().nullable().optional(),
  sitE_POS_D: z.string().nullable().optional(),
  moN_2_B: z.string().nullable().optional(),
  moN_2_E: z.string().nullable().optional(),
  jaN_PAY_RATE_D: z.number().nullable().optional(),
  tuE_2_B: z.string().nullable().optional(),
  tuE_2_E: z.string().nullable().optional(),
  paY_RATE_D: z.number().nullable().optional(),
  weD_2_B: z.string().nullable().optional(),
  weD_2_E: z.string().nullable().optional(),
  seP_PAY_RATE_D: z.number().nullable().optional(),
  thU_2_B: z.string().nullable().optional(),
  thU_2_E: z.string().nullable().optional(),
  maX_HRS_D: z.number().nullable().optional(),
  effectiveDateDuring: z.string().nullable().optional(),
  allottedd: z.number().nullable().optional(),
  frI_2_B: z.string().nullable().optional(),
  frI_2_E: z.string().nullable().optional(),
  salarY_D: z.number().nullable().optional(),

  sitE_NAM_A: z.string().nullable().optional(),
  sitE_POS_A: z.string().nullable().optional(),
  moN_3_B: z.string().nullable().optional(),
  moN_3_E: z.string().nullable().optional(),
  jaN_PAY_RATE_A: z.number().nullable().optional(),
  tuE_3_B: z.string().nullable().optional(),
  tuE_3_E: z.string().nullable().optional(),
  paY_RATE_A: z.number().nullable().optional(),
  weD_3_B: z.string().nullable().optional(),
  weD_3_E: z.string().nullable().optional(),
  seP_PAY_RATE_A: z.number().nullable().optional(),
  thU_3_B: z.string().nullable().optional(),
  thU_3_E: z.string().nullable().optional(),
  maX_HRS_A: z.number().nullable().optional(),
  effectiveDateAfter: z.string().nullable().optional(),
  allotteda: z.number().nullable().optional(),
  frI_3_B: z.string().nullable().optional(),
  frI_3_E: z.string().nullable().optional(),
  salarY_A: z.number().nullable().optional(),

  // History
  medicalexp: z.string().nullable().optional(),
  cpr: z.string().nullable().optional(),
  firstaid: z.string().nullable().optional(),
  matdate: z.string().nullable().optional(),
  matapp: z.string().nullable().optional(),
  childAbuseExpire: z.string().nullable().optional(),
  foundations: z.string().nullable().optional(),
  foundations15H: z.string().nullable().optional(),
  sHarassmentExp: z.string().nullable().optional(),
  // sHarassmentExp2: z.string().nullable().optional(),
  aces: z.string().nullable().optional(),
  eLaw: z.string().nullable().optional(),
  education: z.string().nullable().optional(),
  PersonnelDate1: z.string().nullable().optional(),
  PersonnelDate2: z.string().nullable().optional(),
  PersonnelDate3: z.string().nullable().optional(),
  ProfessionalDate1: z.string().nullable().optional(),
  ProfessionalDate12: z.string().nullable().optional(),
  ProfessionalDate13: z.string().nullable().optional(),
  ProfessionalDate2: z.string().nullable().optional(),
  ProfessionalDate22: z.string().nullable().optional(),
  ProfessionalDate23: z.string().nullable().optional(),
  note: z.string().nullable().optional(),
  w4: z.boolean().nullable().optional(),
  app: z.boolean().nullable().optional(),
  i9: z.boolean().nullable().optional(),
  idca: z.boolean().nullable().optional(),
  iD1: z.boolean().nullable().optional(),
  iD2: z.boolean().nullable().optional(),
  hireletter: z.boolean().nullable().optional(),
  gender: z.string().nullable().optional(),
  emernamE1: z.string().nullable().optional(),
  emernamE2: z.string().nullable().optional(),
  emerphonE1: z.string().nullable().optional(),
  emerphonE2: z.string().nullable().optional(),
  emercelL1: z.string().nullable().optional(),
  emercelL2: z.string().nullable().optional(),
  country: z.string().nullable().optional(),
  referedby: z.string().nullable().optional(),
  // emergencyContantNumber: z.string().optional(),
  // firstEmergencyConcact: z.string().optional(),
  // secondEmergencyConcact: z.string().optional(),
  // EMERNAME1: z.string().optional(),
  // EMERPHONE1: z.string().optional(),
  // EMERCELL1: z.string().optional(),
  // EMERNAME2: z.string().optional(),
  // EMERPHONE2: z.string().optional(),
  // EMERCELL2: z.string().optional(),
  type: z.number().nullable().optional(),
})

export const personnelBasicFormSchema = z.object({
  // PersonalID: z.number().optional(),
  firstname: z.string({
    required_error: "First Name is required",
  }).min(1, "First Name is required"),
  lastname: z.string({
    required_error: "Last Name is required",
  }).min(1, "Last Name is required"),
  street: z.string().nullable().optional(),
  city: z.string().nullable().optional(),
  state: z.string().nullable().optional(),
  zipcode: z.string().nullable().optional(),
  email: z.string({
    required_error: "Email is required",
  }).min(1, "Email is required").refine((value) => !value || z.string().email().safeParse(value).success, {
        message: "Invalid email address",
      }),
  doemp: z.string().nullable().optional(),
  cbc: z.string().nullable().optional(),
  rehired: z.string().nullable().optional(),
  homephone: z.string().nullable().optional(),
  workphone: z.string().nullable().optional(),
  otherphone: z.string().nullable().optional(),
  dob: z.string().nullable().optional(),
  stafF_ID: z.number().nullable().optional(),
  fingerprintDate: z.string().nullable().optional(),
  doterm: z.string().nullable().optional(),
  expungeDate: z.string().nullable().optional(),
  leaves: z.boolean().nullable().optional(),
  leaveStartDate: z.string().nullable().optional(),
  leaveEndDate: z.string().nullable().optional(),
  suspension: z.boolean().nullable().optional(),
  suspensionStartDate: z.string().nullable().optional(),
  suspensionEndDate: z.string().nullable().optional(),
  personalFieldSupervisor: z.string().nullable().optional(),
  personalFieldTrainer: z.string().nullable().optional(),
  personalHHC: z.string().nullable().optional(),
  comment: z.string().nullable().optional(),
  rehireable: z.boolean().nullable().optional(),
  Hidden: z.boolean().nullable().optional(),
})

export const personnelExperienceFormSchema = z.object({
  sitE_NAM_B: z.string().nullable().optional(),
  sitE_POS_B: z.string().nullable().optional(),
  moN_1_B: z.string().nullable().optional(),
  moN_1_E: z.string().nullable().optional(),
  jaN_PAY_RATE_B: z.number().nullable().optional(),
  tuE_1_B: z.string().nullable().optional(),
  tuE_1_E: z.string().nullable().optional(),
  paY_RATE_B: z.number().nullable().optional(),
  weD_1_B: z.string().nullable().optional(),
  weD_1_E: z.string().nullable().optional(),
  seP_PAY_RATE_B: z.number().nullable().optional(),
  thU_1_B: z.string().nullable().optional(),
  thU_1_E: z.string().nullable().optional(),
  maX_HRS_B: z.number().nullable().optional(),
  frI_1_B: z.string().nullable().optional(),
  frI_1_E: z.string().nullable().optional(),
  salarY_B: z.number().nullable().optional(),
  effectiveDateBefore: z.string().nullable().optional(),
  allottedb: z.number().nullable().optional(),
  aloneWithChildren: z.boolean().nullable().optional(),

  sitE_NAM_D: z.string().nullable().optional(),
  sitE_POS_D: z.string().nullable().optional(),
  moN_2_B: z.string().nullable().optional(),
  moN_2_E: z.string().nullable().optional(),
  jaN_PAY_RATE_D: z.number().nullable().optional(),
  tuE_2_B: z.string().nullable().optional(),
  tuE_2_E: z.string().nullable().optional(),
  paY_RATE_D: z.number().nullable().optional(),
  weD_2_B: z.string().nullable().optional(),
  weD_2_E: z.string().nullable().optional(),
  seP_PAY_RATE_D: z.number().nullable().optional(),
  thU_2_B: z.string().nullable().optional(),
  thU_2_E: z.string().nullable().optional(),
  maX_HRS_D: z.number().nullable().optional(),
  effectiveDateDuring: z.string().nullable().optional(),
  allottedd: z.number().nullable().optional(),
  frI_2_B: z.string().nullable().optional(),
  frI_2_E: z.string().nullable().optional(),
  salarY_D: z.number().nullable().optional(),

  sitE_NAM_A: z.string().nullable().optional(),
  sitE_POS_A: z.string().nullable().optional(),
  moN_3_B: z.string().nullable().optional(),
  moN_3_E: z.string().nullable().optional(),
  jaN_PAY_RATE_A: z.number().nullable().optional(),
  tuE_3_B: z.string().nullable().optional(),
  tuE_3_E: z.string().nullable().optional(),
  paY_RATE_A: z.number().nullable().optional(),
  weD_3_B: z.string().nullable().optional(),
  weD_3_E: z.string().nullable().optional(),
  seP_PAY_RATE_A: z.number().nullable().optional(),
  thU_3_B: z.string().nullable().optional(),
  thU_3_E: z.string().nullable().optional(),
  maX_HRS_A: z.number().nullable().optional(),
  effectiveDateAfter: z.string().nullable().optional(),
  allotteda: z.number().nullable().optional(),
  frI_3_B: z.string().nullable().optional(),
  frI_3_E: z.string().nullable().optional(),
  salarY_A: z.number().nullable().optional(),
})

export const personnelHistoryFormSchema = z.object({
  medicalexp: z.string().nullable().optional(),
  cpr: z.string().nullable().optional(),
  firstaid: z.string().nullable().optional(),
  matdate: z.string().nullable().optional(),
  matapp: z.string().nullable().optional(),
  childAbuseExpire: z.string().nullable().optional(),
  foundations: z.string().nullable().optional(),
  foundations15H: z.string().nullable().optional(),
  sHarassmentExp: z.string().nullable().optional(),
  // sHarassmentExp2: z.string().nullable().optional(),
  aces: z.string().nullable().optional(),
  eLaw: z.string().nullable().optional(),
  education: z.string().nullable().optional(),
  PersonnelDate1: z.string().nullable().optional(),
  PersonnelDate2: z.string().nullable().optional(),
  PersonnelDate3: z.string().nullable().optional(),
  ProfessionalDate1: z.string().nullable().optional(),
  ProfessionalDate12: z.string().nullable().optional(),
  ProfessionalDate13: z.string().nullable().optional(),
  ProfessionalDate2: z.string().nullable().optional(),
  ProfessionalDate22: z.string().nullable().optional(),
  ProfessionalDate23: z.string().nullable().optional(),
  note: z.string().nullable().optional(),
  w4: z.boolean().nullable().optional(),
  app: z.boolean().nullable().optional(),
  i9: z.boolean().nullable().optional(),
  idca: z.boolean().nullable().optional(),
  iD1: z.boolean().nullable().optional(),
  iD2: z.boolean().nullable().optional(),
  hireletter: z.boolean().nullable().optional(),
  gender: z.string().nullable().optional(),
  emernamE1: z.string().nullable().optional(),
  emernamE2: z.string().nullable().optional(),
  emerphonE1: z.string().nullable().optional(),
  emerphonE2: z.string().nullable().optional(),
  emercelL1: z.string().nullable().optional(),
  emercelL2: z.string().nullable().optional(),
  country: z.string().nullable().optional(),
  referedby: z.string().nullable().optional(),
  type: z.number().nullable().optional(),
})

export const PersonalTimesheetFormSchema = z.object({
  districtID: z.number({
    required_error: "District is required",
  }).min(1, "District is required"),
  siteID: z.number({
    required_error: "Site is required",
  }).min(1, "Site is required"),
  // schoolID: z.number({
  //   required_error: "School is required",
  // }).min(1, "School is required"),
  position: z.string({
    required_error: "Position is required",
  }).min(1, "Position is required"),
  timeSheetDate: z.string().nullable().optional(),
  timeIn: z.string().nullable().optional(),
  timeOut: z.string().nullable().optional(),
  lunchIn: z.string().nullable().optional(),
  additionalStart: z.string().nullable().optional(),
  lunchOut: z.string().nullable().optional(),
  additionalStop: z.string().nullable().optional(),
  deviceID: z.string().nullable().optional(),
  type: z.number().nullable().optional(),
  createdBy: z.string().nullable().optional(),
  modifiedBy: z.string().nullable().optional(),
  clockInLocal: z.string().nullable().optional(),
  clockOutLocal: z.string().nullable().optional(),
  notesHeader: z.string().nullable().optional(),
  notesDetails: z.string().nullable().optional(),
})


  export const CalendarSchema = () => z.object({
    // siteTypeBefore: z.boolean().nullable().optional(),
    // siteTypeDuring: z.boolean().nullable().optional(),
    // siteTypeAfter: z.boolean().nullable().optional(),
    siteID: z.number({
      required_error: "Site is required!",
    }),
    // siteID: z.number().nullable().optional(),
    siteType: z.string().nullable().optional(),
    position: z.string({
      required_error: "Position is required!",
    }).min(1, "Date is required!"),
    paycode: z.string().nullable().optional(),
    notes: z.string().nullable().optional(),
    date: z.string().nullable().optional(),
    updatedDate: z.string().nullable().optional(),
    startDate: z.string().nullable().optional(),
    endDate: z.string().nullable().optional(),
    // date: isEditingSchedular
    //     ? z.string({
    //         required_error: "Date is required!",
    //       }).min(1, "Date is required!")
    //     : z.string().nullable().optional(),
    // startDate: z.string({
    //   required_error: "Start date is required!",
    // }).min(1, "Date is required!"),
    // endDate: z.string({
    //   required_error: "End date is required!",
    // }).min(1, "Date is required!"),
    // date: z.string({
    //   required_error: "Date is required!",
    // }).min(1, "Date is required!"),
    // timeIn: z.string({
    //   required_error: "Time In is required!",
    // }).min(1, "Time In is required!"),
    // timeOut: z.string({
    //   required_error: "Time Out is required!",
    // }).min(1, "Time Out is required!"),
    lunchIn: z.string().nullable().optional(),
    lunchOut: z.string().nullable().optional(),
    additionalStart: z.string().nullable().optional(),
    additionalStop: z.string().nullable().optional(),

    // TimeIn and TimeOut for each day of the week
    mondayTimeIn: z.string().nullable().optional(),
    mondayTimeOut: z.string().nullable().optional(),

    tuesdayTimeIn: z.string().nullable().optional(),
    tuesdayTimeOut: z.string().nullable().optional(),

    wednesdayTimeIn: z.string().nullable().optional(),
    wednesdayTimeOut: z.string().nullable().optional(),

    thursdayTimeIn: z.string().nullable().optional(),
    thursdayTimeOut: z.string().nullable().optional(),

    fridayTimeIn: z.string().nullable().optional(),
    fridayTimeOut: z.string().nullable().optional(),
    paycodeRequired: z.boolean().nullable().optional(),
  }).refine(
    (data) => {
      // Ensure `paycode` is required if `paycodeRequired` is true
      if (data.paycodeRequired && !data.paycode) {
        return false;
      }
      return true;
    },
    {
      message: "Paycode is required!",
      path: ["paycode"],
    }
  );

export const certificateFormSchema = z.object({
  certificateTypeID: z.number({
    required_error: "Certificate is required!",
  }).min(1, "Certificate is required!"),
  certificatePermanent: z.boolean().optional(),
  certificateProfessional: z.boolean().optional(),
  certificateCQ: z.boolean().optional(),
  initial: z.boolean().optional(),
  initialExpiration: z.string().nullable().optional(),
  provisional: z.boolean().optional(),
  provisionalExpiration: z.string().nullable().optional(),
})


export const attendanceFormSchema = z.object({
  // certificateTypeID: z.number({
  //   required_error: "Certificate is required!",
  // }).min(1, "Certificate is required!"),
  date: z.string({
    required_error: "Date is required!",
  }).min(1, "Date is required!"),
  reason: z.string().nullable().optional(),
  paid: z.boolean().nullable().optional(),
  charged: z.boolean().nullable().optional(),
  fraction: z.string().nullable().optional(),
  siteNumber: z.number({
    required_error: "Site Name is required!",
  }).min(1, "Site Name is required!"),
  reasonID: z.number().nullable().optional(),
})

export const waiverFormSchema = z.object({
  sent: z.string({
    required_error: "Date is required!",
  }).min(1, "Date is required!"),
})
